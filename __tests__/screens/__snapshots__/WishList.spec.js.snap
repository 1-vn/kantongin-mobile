// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders <WishList /> component correctly 1`] = `
<View
  style={undefined}
>
  <View
    style={undefined}
  >
    <RCTScrollView
      ListEmptyComponent={[Function]}
      data={
        Array [
          Object {
            "main_pair": Object {
              "detailed": Object {
                "http_image_path": "http://image.path",
              },
            },
            "price_formatted": Object {
              "price": "20$",
            },
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      invertStickyHeaders={undefined}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onRefresh={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshControl={
        <RefreshControlMock
          onRefresh={[Function]}
          progressViewOffset={undefined}
          refreshing={false}
        />
      }
      refreshing={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <RCTRefreshControl />
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "#dbddde",
                  "overflow": "hidden",
                },
                undefined,
                Array [
                  Object {
                    "backgroundColor": "#FAFAFA",
                  },
                ],
              ]
            }
          >
            <View
              onLayout={[Function]}
              onMoveShouldSetResponder={[Function]}
              onMoveShouldSetResponderCapture={[Function]}
              onResponderEnd={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderReject={[Function]}
              onResponderRelease={[Function]}
              onResponderStart={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              onStartShouldSetResponderCapture={[Function]}
              style={
                Array [
                  Object {},
                  Object {
                    "left": 0,
                  },
                ]
              }
            >
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hasTVPreferredFocus={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <Image
                  source={
                    Object {
                      "uri": "http://image.path",
                    }
                  }
                  style={undefined}
                />
                <View
                  style={undefined}
                >
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    numberOfLines={1}
                    style={undefined}
                  />
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={undefined}
                  >
                     x 
                    20$
                  </Text>
                </View>
              </View>
            </View>
            <View />
            <View />
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;
